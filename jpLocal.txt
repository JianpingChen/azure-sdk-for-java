diff --git a/sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/CommunicationIdentityAsyncTests.java b/sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/CommunicationIdentityAsyncTests.java
index b28316a28a..174c55f447 100644
--- a/sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/CommunicationIdentityAsyncTests.java
+++ b/sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/CommunicationIdentityAsyncTests.java
@@ -31,23 +31,6 @@ public class CommunicationIdentityAsyncTests extends CommunicationIdentityClient
         super.beforeTest();
     }
 
-    @ParameterizedTest
-    @MethodSource("com.azure.core.test.TestBase#getHttpClients")
-    public void createAsyncIdentityClientUsingManagedIdentity(HttpClient httpClient) {
-        // Arrange
-        asyncClient = getCommunicationIdentityClientBuilderUsingManagedIdentity(httpClient).buildAsyncClient();
-        assertNotNull(asyncClient);
-
-        // Action & Assert
-        Mono<CommunicationUserIdentifier> response = asyncClient.createUser();
-        StepVerifier.create(response)
-            .assertNext(item -> {
-                assertNotNull(item.getId());
-                assertFalse(item.getId().isEmpty());
-            })
-            .verifyComplete();
-    }
-
     @ParameterizedTest
     @MethodSource("com.azure.core.test.TestBase#getHttpClients")
     public void createAsyncIdentityClientUsingConnectionString(HttpClient httpClient) {
@@ -207,7 +190,7 @@ public class CommunicationIdentityAsyncTests extends CommunicationIdentityClient
                         });
                 }))
             .assertNext(item -> {
-                assertEquals(204, item.getStatusCode(), "Expect status code to be 204");    
+                assertEquals(204, item.getStatusCode(), "Expect status code to be 204");
             })
             .verifyComplete();
     }
diff --git a/sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/CommunicationIdentityClientTestBase.java b/sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/CommunicationIdentityClientTestBase.java
index 5cd0b6afd1..ff0728d2dc 100644
--- a/sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/CommunicationIdentityClientTestBase.java
+++ b/sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/CommunicationIdentityClientTestBase.java
@@ -29,14 +29,14 @@ public class CommunicationIdentityClientTestBase extends TestBase {
         .get("ADMINISTRATION_SERVICE_ACCESS_TOKEN", ACCESSKEYENCODED);
 
     protected static final String CONNECTION_STRING = Configuration.getGlobalConfiguration()
-        .get("COMMUNICATION_CONNECTION_STRING", "endpoint=https://REDACTED.communication.azure.com/;accesskey=" + ACCESSKEYENCODED);
-    
+        .get("COMMUNICATION_LIVETEST_CONNECTION_STRING", "endpoint=https://REDACTED.communication.azure.com/;accesskey=" + ACCESSKEYENCODED);
+
     protected CommunicationIdentityClientBuilder getCommunicationIdentityClient(HttpClient httpClient) {
         CommunicationIdentityClientBuilder builder = new CommunicationIdentityClientBuilder();
         builder.endpoint(ENDPOINT)
             .accessKey(ACCESSKEY)
             .httpClient(httpClient == null ? interceptorManager.getPlaybackClient() : httpClient);
-       
+
         if (getTestMode() == TestMode.RECORD) {
             builder.addPolicy(interceptorManager.getRecordPolicy());
         }
@@ -49,7 +49,7 @@ public class CommunicationIdentityClientTestBase extends TestBase {
         builder
             .endpoint(ENDPOINT)
             .httpClient(httpClient == null ? interceptorManager.getPlaybackClient() : httpClient);
-        
+
         if (getTestMode() == TestMode.PLAYBACK) {
             builder.credential(new FakeCredentials());
         } else {
diff --git a/sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/CommunicationIdentityTests.java b/sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/CommunicationIdentityTests.java
index a18a675e8f..d59b5a679b 100644
--- a/sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/CommunicationIdentityTests.java
+++ b/sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/CommunicationIdentityTests.java
@@ -26,19 +26,6 @@ public class CommunicationIdentityTests extends CommunicationIdentityClientTestB
         super.beforeTest();
     }
 
-    @ParameterizedTest
-    @MethodSource("com.azure.core.test.TestBase#getHttpClients")
-    public void createIdentityClientUsingManagedIdentity(HttpClient httpClient) {
-        // Arrange
-        client = getCommunicationIdentityClientBuilderUsingManagedIdentity(httpClient).buildClient();
-        assertNotNull(client);
-
-        // Action & Assert
-        CommunicationUserIdentifier communicationUser = client.createUser();
-        assertNotNull(communicationUser.getId());
-        assertFalse(communicationUser.getId().isEmpty());
-    }
-
     @ParameterizedTest
     @MethodSource("com.azure.core.test.TestBase#getHttpClients")
     public void createIdentityClientUsingConnectionString(HttpClient httpClient) {
@@ -52,7 +39,7 @@ public class CommunicationIdentityTests extends CommunicationIdentityClientTestB
         assertFalse(communicationUser.getId().isEmpty());
     }
 
-    
+
     @ParameterizedTest
     @MethodSource("com.azure.core.test.TestBase#getHttpClients")
     public void createUser(HttpClient httpClient) {
@@ -87,7 +74,7 @@ public class CommunicationIdentityTests extends CommunicationIdentityClientTestB
         // Action & Assert
         CommunicationUserIdentifier communicationUser = client.createUser();
         assertNotNull(communicationUser.getId());
-        client.deleteUser(communicationUser);    
+        client.deleteUser(communicationUser);
     }
 
     @ParameterizedTest
@@ -128,7 +115,7 @@ public class CommunicationIdentityTests extends CommunicationIdentityClientTestB
         List<String> scopes = new ArrayList<>(Arrays.asList("chat"));
         CommunicationUserToken token = client.issueToken(communicationUser, scopes);
         Response<Void> response = client.revokeTokensWithResponse(token.getUser(), null, Context.NONE);
-        assertEquals(204, response.getStatusCode(), "Expect status code to be 204");    
+        assertEquals(204, response.getStatusCode(), "Expect status code to be 204");
     }
 
     @ParameterizedTest
diff --git a/sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/PhoneNumberIntegrationTestBase.java b/sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/PhoneNumberIntegrationTestBase.java
index 11e958a187..e05e65b7bc 100644
--- a/sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/PhoneNumberIntegrationTestBase.java
+++ b/sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/PhoneNumberIntegrationTestBase.java
@@ -14,7 +14,7 @@ public class PhoneNumberIntegrationTestBase extends TestBase {
     private static final String ENV_ACCESS_KEY = Configuration.getGlobalConfiguration()
             .get("COMMUNICATION_SERVICE_ACCESS_KEY", "QWNjZXNzS2V5");
     private static final String ENV_ENDPOINT = Configuration.getGlobalConfiguration()
-            .get("COMMUNICATION_SERVICE_ENDPOINT", "https://REDACTED.communication.azure.com");
+            .get("ADMINISTRATION_SERVICE_ENDPOINT", "https://REDACTED.communication.azure.com");
     private static final String CONNECTION_STRING = Configuration.getGlobalConfiguration().get(
             "COMMUNICATION_LIVETEST_CONNECTION_STRING",
             "endpoint=https://REDACTED.communication.azure.com/;accesskey=QWNjZXNzS2V5");
diff --git a/sdk/communication/azure-communication-chat/src/test/java/com/azure/communication/chat/ChatClientTestBase.java b/sdk/communication/azure-communication-chat/src/test/java/com/azure/communication/chat/ChatClientTestBase.java
index b2f83c00dd..062f25a993 100644
--- a/sdk/communication/azure-communication-chat/src/test/java/com/azure/communication/chat/ChatClientTestBase.java
+++ b/sdk/communication/azure-communication-chat/src/test/java/com/azure/communication/chat/ChatClientTestBase.java
@@ -38,7 +38,7 @@ public class ChatClientTestBase extends TestBase {
         .get("CHAT_SERVICE_ENDPOINT", "https://playback.chat.azurefd.net");
 
     protected static final String ACCESS_KEY = Configuration.getGlobalConfiguration()
-        .get("COMMUNICATION_SERVICES_ACCESS_KEY", "pw==");
+        .get("COMMUNICATION_SERVICE_ACCESS_KEY", "pw==");
 
     protected ChatClientBuilder getChatClientBuilder(String token, HttpClient httpClient) {
         ChatClientBuilder builder = new ChatClientBuilder();
